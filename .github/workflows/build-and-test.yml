name: Build and Test P2PP

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ['3.11']  # Use 3.11 for cx_Freeze compatibility
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Create virtual environment
      run: uv venv
    
    - name: Install dependencies
      run: |
        uv sync --extra dev --no-build
    
    - name: Test architecture detection
      run: |
        uv run python scripts/check_architecture.py
    
    - name: Run unit tests
      run: |
        uv run python -m pytest tests/unit/ -v
    
    - name: Test development commands
      run: |
        uv run python scripts/dev.py check-arch
        uv run python scripts/dev.py test-unit
    
    - name: Verify setup.py functionality
      run: |
        uv run python setup.py --help-commands

  build-macos-intel:
    name: Build macOS Intel
    runs-on: macos-13  # Intel runner
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Install build dependencies
      run: |
        uv venv
        uv sync --no-build
        uv pip install py2app setuptools wheel
    
    - name: Verify architecture
      run: |
        uv run python -c "import platform; print(f'Building on: {platform.system()} {platform.machine()}')"
        uv run python scripts/check_architecture.py
    
    - name: Test build command (dry run)
      run: |
        export ARCHFLAGS="-arch x86_64"
        uv run python setup.py py2app --help
    
    - name: Archive architecture info
      run: |
        uv run python scripts/check_architecture.py > architecture-intel.txt
    
    - name: Upload architecture info
      uses: actions/upload-artifact@v4
      with:
        name: architecture-intel
        path: architecture-intel.txt

  build-macos-arm:
    name: Build macOS ARM
    runs-on: macos-14  # ARM runner
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Install build dependencies
      run: |
        uv venv
        uv sync --no-build
        uv pip install py2app setuptools wheel
    
    - name: Verify architecture
      run: |
        uv run python -c "import platform; print(f'Building on: {platform.system()} {platform.machine()}')"
        uv run python scripts/check_architecture.py
    
    - name: Test build command (dry run)
      run: |
        export ARCHFLAGS="-arch arm64"
        uv run python setup.py py2app --help
    
    - name: Archive architecture info
      run: |
        uv run python scripts/check_architecture.py > architecture-arm.txt
    
    - name: Upload architecture info
      uses: actions/upload-artifact@v4
      with:
        name: architecture-arm
        path: architecture-arm.txt

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Install build dependencies
      run: |
        uv venv
        uv sync --no-build
        uv pip install cx_freeze setuptools wheel
    
    - name: Verify architecture
      run: |
        uv run python -c "import platform; print(f'Building on: {platform.system()} {platform.machine()}')"
        uv run python scripts/check_architecture.py
    
    - name: Test build command (dry run)
      run: |
        uv run python setup.py --help-commands
    
    - name: Archive architecture info
      run: |
        uv run python scripts/check_architecture.py > architecture-windows.txt
    
    - name: Upload architecture info
      uses: actions/upload-artifact@v4
      with:
        name: architecture-windows
        path: architecture-windows.txt

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm
    
    - name: Install build dependencies
      run: |
        uv venv
        uv sync --no-build
        uv pip install cx_freeze setuptools wheel stdeb
    
    - name: Verify architecture
      run: |
        uv run python -c "import platform; print(f'Building on: {platform.system()} {platform.machine()}')"
        uv run python scripts/check_architecture.py
    
    - name: Test build commands (dry run)
      run: |
        uv run python setup.py bdist_rpm --help
    
    - name: Archive architecture info
      run: |
        uv run python scripts/check_architecture.py > architecture-linux.txt
    
    - name: Upload architecture info
      uses: actions/upload-artifact@v4
      with:
        name: architecture-linux
        path: architecture-linux.txt

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build-macos-intel, build-macos-arm, build-windows, build-linux]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Install dependencies
      run: |
        uv venv
        uv sync --extra dev --no-build
    
    - name: Download all architecture artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Verify all architectures were tested
      run: |
        ls -la artifacts/
        echo "=== Intel Architecture ==="
        cat artifacts/architecture-intel/architecture-intel.txt || echo "Intel build not available"
        echo "=== ARM Architecture ==="
        cat artifacts/architecture-arm/architecture-arm.txt || echo "ARM build not available"
        echo "=== Windows Architecture ==="
        cat artifacts/architecture-windows/architecture-windows.txt || echo "Windows build not available"
        echo "=== Linux Architecture ==="
        cat artifacts/architecture-linux/architecture-linux.txt || echo "Linux build not available"
    
    - name: Run end-to-end tests
      run: |
        uv run python -m pytest tests/e2e/ -v -k "not slow"
    
    - name: Verify architecture detection works
      run: |
        uv run python scripts/check_architecture.py
        echo "Architecture detection completed successfully"