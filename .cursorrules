# P2PP Development Rules for AI Code Assistants (Cursor, GitHub Copilot, etc.)

## Project Overview
P2PP is a post-processing tool for Palette 2 printers. Uses Python + PyQt5. Modern workflow with uv package manager.

## Critical Architecture Rules

### NEVER Use Universal2 Builds
- PyQt5/QtWebEngine breaks with universal2
- Always build separate Intel (x86_64) and ARM (arm64) for macOS
- Error: "mach-o file, but is an incompatible architecture"

### Architecture Commands
```bash
uv run check-arch        # Check system architecture
uv run build-macos-intel # Intel macOS build
uv run build-macos-arm   # ARM macOS build
uv run build             # Auto-detect platform build
```

## Development Workflow

### New Developer Setup
```bash
uv run start             # Complete setup (sync + dev-setup)
uv run quick             # Run quick tests
```

### Daily Development
```bash
uv run test              # All tests
uv run test-unit         # Fast unit tests
uv run fix               # Auto-fix formatting issues
uv run all               # Test + lint everything
```

### Before Commits
```bash
uv run pre-commit        # Run pre-commit hooks
uv run ci-check          # Check CI compliance
```

## Code Style Rules

### Communication Style
- Be terse and direct
- Avoid emojis in code, comments, docs
- Use clear, concise descriptions
- Focus on technical accuracy over enthusiasm

### Python Style
- Use black formatter (88 char line length)
- Import sorting with isort (black profile)
- Type hints required for new code
- pytest for all tests

### File Organization
```
tests/unit/              # Fast unit tests
tests/integration/       # System integration tests  
tests/e2e/              # End-to-end architecture tests
scripts/                # Development utilities
```

## Testing Strategy

### Test Categories (use markers)
- `@pytest.mark.unit` - Fast, isolated tests
- `@pytest.mark.integration` - System component tests
- `@pytest.mark.e2e` - Full workflow tests
- `@pytest.mark.gui` - GUI tests (skip in CI)
- `@pytest.mark.macos/.windows/.linux` - Platform-specific
- `@pytest.mark.intel/.arm` - Architecture-specific

### Test Commands
```bash
uv run test-unit         # Development testing
uv run test-coverage     # Coverage reports
uv run test-arch         # Architecture validation
```

## Architecture Testing

### macOS Builds
- Intel: `--arch=x86_64` + `ARCHFLAGS="-arch x86_64"`
- ARM: `--arch=arm64` + `ARCHFLAGS="-arch arm64"`
- Never: `--arch=universal2`

### Cross-compilation Support
- ARM Macs can build Intel binaries
- Intel Macs can build ARM binaries (Rosetta)
- Test both architectures in CI

## Dependencies

### Core Dependencies
- PyQt5 >= 5.15.0 (GUI framework)
- PyQtWebEngine >= 5.15.0 (web components)
- requests >= 2.31.0 (HTTP)
- packaging >= 23.2 (version handling)

### Development Tools
- pytest (testing framework)
- black (code formatter)
- isort (import sorter)
- flake8 (linting)
- mypy (type checking)
- uv (package manager)

## Common Patterns

### Adding New Tests
1. Choose appropriate test category (unit/integration/e2e)
2. Use fixtures from `tests/conftest.py`
3. Add platform/architecture markers if needed
4. Follow naming: `test_<functionality>_<condition>`

### Adding uv Scripts
1. Add to `[tool.uv.scripts]` in `pyproject.toml`
2. Use descriptive names
3. Chain commands with arrays for multi-step operations
4. Test on all platforms

### Build System Changes
1. Update `setup.py` for build logic
2. Update GitHub Actions workflows
3. Test architecture-specific builds
4. Update documentation

## Platform-Specific Notes

### macOS
- Use py2app for app bundles
- Create DMG files with create-dmg
- Sign with codesign (development: ad-hoc)

### Windows  
- Use setuptools for MSI packages
- Sign with signtool (development: self-signed)

### Linux
- Build RPM and DEB packages
- Use system PyQt5 packages when possible
- Support both x86_64 and ARM64

## AI Assistant Guidelines

### For Cursor Users
- Use project context for architecture awareness
- Reference `.cursorrules` for project standards
- Suggest uv commands over manual steps

### For GitHub Copilot Users
- Check `pyproject.toml` for available uv scripts
- Follow existing code patterns in the project
- Use type hints and docstrings for better suggestions

### Code Generation
- Always include type hints for new functions
- Use pytest fixtures for test setup
- Follow existing import organization
- Add appropriate test markers

### Documentation
- Update relevant docs when changing APIs
- Keep examples current with uv commands
- Test documentation code examples

## Quick Reference

### Essential Commands
```bash
uv run start             # New developer setup
uv run test              # Run all tests  
uv run fix               # Fix formatting
uv run build             # Platform-specific build
uv run check-arch        # Architecture info
```

### File Locations
- Main config: `pyproject.toml`
- Test config: `tests/conftest.py`
- CI config: `.github/workflows/`
- Build config: `setup.py`

### Architecture Files
- Check script: `scripts/check_architecture.py`
- Test script: `scripts/test_architecture_builds.py`
- Documentation: `docs/ARCHITECTURE_BUILDS.md`